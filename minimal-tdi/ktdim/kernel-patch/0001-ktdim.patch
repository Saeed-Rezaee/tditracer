From 123562098c0cdcd40677597f1c2ac9e29135d55b Mon Sep 17 00:00:00 2001
From: Rob Vogelaar <revogelaar@gmail.com>
Date: Wed, 4 Apr 2018 15:31:36 -0700
Subject: [PATCH] ktdim-kernel-patch

Signed-off-by: Rob Vogelaar <revogelaar@gmail.com>
---
 arch/x86/kernel/irq.c    |   5 +
 fs/exec.c                |   5 +
 include/linux/syscalls.h |   4 +
 kernel/Makefile          |   2 +
 kernel/exit.c            |   4 +
 kernel/ktdim.c           | 652 +++++++++++++++++++++++++++++++++++++++++++++++
 kernel/sched/core.c      |   6 +
 mm/mmap.c                |  14 +-
 mm/mremap.c              |   7 +
 mm/page_alloc.c          |   9 +
 mm/slub.c                |  10 +
 mm/vmalloc.c             |  12 +-
 net/core/skbuff.c        |  12 +
 13 files changed, 740 insertions(+), 2 deletions(-)
 create mode 100644 kernel/ktdim.c

diff --git a/arch/x86/kernel/irq.c b/arch/x86/kernel/irq.c
index 22d0687..9924b5e 100644
--- a/arch/x86/kernel/irq.c
+++ b/arch/x86/kernel/irq.c
@@ -171,6 +171,7 @@ u64 arch_irq_stat(void)
 	return sum;
 }
 
+void tditrace(const char *, ...);
 
 /*
  * do_IRQ handles all normal device IRQ's (the special
@@ -190,6 +191,8 @@ __visible unsigned int __irq_entry do_IRQ(struct pt_regs *regs)
 
 	irq = __this_cpu_read(vector_irq[vector]);
 
+    tditrace("@I+irq%d", irq);
+
 	if (!handle_irq(irq, regs)) {
 		ack_APIC_irq();
 
@@ -200,6 +203,8 @@ __visible unsigned int __irq_entry do_IRQ(struct pt_regs *regs)
 
 	irq_exit();
 
+    tditrace("@I-irq%d", irq);
+
 	set_irq_regs(old_regs);
 	return 1;
 }
diff --git a/fs/exec.c b/fs/exec.c
index bb8afc1..fa5e50b 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1423,6 +1423,8 @@ int search_binary_handler(struct linux_binprm *bprm)
 }
 EXPORT_SYMBOL(search_binary_handler);
 
+void tditrace(const char *, ...);
+
 static int exec_binprm(struct linux_binprm *bprm)
 {
 	pid_t old_pid, old_vpid;
@@ -1435,6 +1437,7 @@ static int exec_binprm(struct linux_binprm *bprm)
 	rcu_read_unlock();
 
 	ret = search_binary_handler(bprm);
+
 	if (ret >= 0) {
 		trace_sched_process_exec(current, old_pid, bprm);
 		ptrace_event(PTRACE_EVENT_EXEC, old_vpid);
@@ -1543,6 +1546,8 @@ static int do_execve_common(const char *filename,
 	if (retval < 0)
 		goto out;
 
+	tditrace("@T+%s|%d", current->comm, current->pid);
+
 	/* execve succeeded */
 	current->fs->in_exec = 0;
 	current->in_execve = 0;
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 7fac04e..b93e432 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -182,6 +182,8 @@ extern struct trace_event_functions exit_syscall_print_funcs;
 	SYSCALL_METADATA(sname, x, __VA_ARGS__)			\
 	__SYSCALL_DEFINEx(x, sname, __VA_ARGS__)
 
+void tditrace(const char *, ...);
+
 #define __PROTECT(...) asmlinkage_protect(__VA_ARGS__)
 #define __SYSCALL_DEFINEx(x, name, ...)					\
 	asmlinkage long sys##name(__MAP(x,__SC_DECL,__VA_ARGS__));	\
@@ -189,7 +191,9 @@ extern struct trace_event_functions exit_syscall_print_funcs;
 	asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__));	\
 	asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__))	\
 	{								\
+	    tditrace("@A+%s", #name); 						\
 		long ret = SYSC##name(__MAP(x,__SC_CAST,__VA_ARGS__));	\
+	    tditrace("@A-%s", #name); 						\
 		__MAP(x,__SC_TEST,__VA_ARGS__);				\
 		__PROTECT(x, ret,__MAP(x,__SC_ARGS,__VA_ARGS__));	\
 		return ret;						\
diff --git a/kernel/Makefile b/kernel/Makefile
index d62c713..051c60c 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -113,6 +113,8 @@ obj-$(CONFIG_CRASH_DUMP) += crash_dump.o
 obj-$(CONFIG_JUMP_LABEL) += jump_label.o
 obj-$(CONFIG_CONTEXT_TRACKING) += context_tracking.o
 
+obj-y += ktdim.o
+
 $(obj)/configs.o: $(obj)/config_data.h
 
 # config_data.h contains the same information as ikconfig.h but gzipped.
diff --git a/kernel/exit.c b/kernel/exit.c
index a949819..206fc55 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -166,11 +166,13 @@ static void delayed_put_task_struct(struct rcu_head *rhp)
 	put_task_struct(tsk);
 }
 
+void tditrace(const char *, ...);
 
 void release_task(struct task_struct * p)
 {
 	struct task_struct *leader;
 	int zap_leader;
+
 repeat:
 	/* don't need to get the RCU readlock here - the process is dead and
 	 * can't be modifying its own credentials. But shut RCU-lockdep up */
@@ -209,6 +211,8 @@ repeat:
 	p = leader;
 	if (unlikely(zap_leader))
 		goto repeat;
+
+	tditrace("@T-%s|%d", p->comm, p-> pid);
 }
 
 /*
diff --git a/kernel/ktdim.c b/kernel/ktdim.c
new file mode 100644
index 0000000..5eaedb5
--- /dev/null
+++ b/kernel/ktdim.c
@@ -0,0 +1,652 @@
+
+#include <asm/uaccess.h>
+#include <linux/ctype.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/errno.h>
+#include <linux/hrtimer.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/kernel.h>
+#include <linux/ktime.h>
+#include <linux/miscdevice.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/pci.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/slab.h>
+#include <linux/spinlock.h>
+#include <linux/string.h>
+#include <linux/time.h>
+#include <linux/types.h>
+
+static DEFINE_SPINLOCK(ktdim_lock);
+unsigned long ktdim_flags;
+
+#define KTDIM_IOCTL_GET_TRACEBUFFERSIZE _IO('T', 0)
+#define KTDIM_IOCTL_REWIND _IO('T', 1)
+#define KTDIM_IOCTL_ON _IO('T', 2)
+#define KTDIM_IOCTL_OFF _IO('T', 3)
+
+typedef unsigned long long _u64;
+
+static u32 gtracebuffersize;
+static u8 gtditrace_enabled;
+static char *gtracebuffer;
+static unsigned int *gtracebuffer_dword_ptr;
+
+static struct page *gtracebuffer_shared_page;
+
+static int tditrace_create_buffer(void) {
+
+  /*
+   * [TDIT]
+   * [RACE]
+   * [    ]timeofday_start.tv_usec
+   * [    ]timeofday_start.tv_sec
+   * [    ]clock_monotonic_start.tv_nsec
+   * [    ]clock_monotonic_start.tv_sec
+   * ------
+   * [    ]marker, byte 1,0 is total length in dwords,
+   *               byte 2   is nr numbers
+   *               byte 3   is identifier
+   * [    ]clock_monotonic_timestamp.tv_nsec
+   * [    ]clock_monotonic_timestamp.tv_sec
+   * [    ]<optional> numbers
+   * [    ]<optional> text, padded with 0's to multiple of 4 bytes
+   * ...
+   */
+
+  unsigned int *p;
+  _u64 atimeofday_start;
+  _u64 amonotonic_start;
+
+  gtracebuffersize = 32 * 1024 * 1024;
+  gtracebuffer = (char *)vmalloc_user(gtracebuffersize);
+
+  gtracebuffer_shared_page = virt_to_page(gtracebuffer);
+
+  if (gtracebuffer == 0) {
+    printk("ktdim: unable to allocate %dMB tracebuffer\n",
+           gtracebuffersize / (1024 * 1024));
+    return -1;
+  }
+
+  memset(gtracebuffer, 0, gtracebuffersize);
+
+  printk("ktdim: allocated %dMB @0x%08x tracebuffer\n",
+         gtracebuffersize / (1024 * 1024), (u32)gtracebuffer);
+
+  gtracebuffer_dword_ptr = (unsigned int *)gtracebuffer;
+
+  /*
+   * write one time start text
+   */
+  sprintf((char *)gtracebuffer_dword_ptr, (char *)"TDITRACE");
+  gtracebuffer_dword_ptr += 2;
+
+  p = gtracebuffer_dword_ptr;
+
+  do_gettimeofday((struct timeval *)gtracebuffer_dword_ptr);
+  gtracebuffer_dword_ptr += 2;
+
+  do_posix_clock_monotonic_gettime((struct timespec *)gtracebuffer_dword_ptr);
+  gtracebuffer_dword_ptr += 2;
+
+  atimeofday_start = (_u64)*p++ * 1000000000;
+  atimeofday_start += (_u64)*p++ * 1000;
+
+  amonotonic_start = (_u64)*p++ * 1000000000;
+  amonotonic_start += (_u64)*p++;
+
+  *gtracebuffer_dword_ptr = 0;
+
+  gtditrace_enabled = 1;
+
+  return 0;
+}
+
+static void tditrace_internal(va_list args, const char *format);
+
+void tditrace(const char *format, ...) {
+  va_list args;
+
+  va_start(args, format);
+
+  tditrace_internal(args, format);
+
+  va_end(args);
+}
+
+EXPORT_SYMBOL(tditrace);
+
+static void tditrace_internal(va_list args, const char *format) {
+
+  unsigned int trace_text[512 / 4];
+  unsigned int numbers[16];
+  unsigned int *pnumbers = numbers;
+  unsigned char nr_numbers = 0;
+  unsigned char identifier = 0;
+  unsigned int i;
+  char *trace_text_ptr;
+  unsigned int *trace_text_dword_ptr;
+  char ch;
+  struct timespec mytime;
+  int nr_textdwords;
+
+  if (!gtditrace_enabled) {
+    return;
+  }
+
+  /*
+   * take and store timestamp
+   */
+  do_posix_clock_monotonic_gettime(&mytime);
+  /*
+   * parse the format string
+   */
+  trace_text_ptr = (char *)trace_text;
+  trace_text_dword_ptr = (unsigned int *)trace_text;
+
+  while ((ch = *(format++))) {
+    if (ch == '%') {
+      switch (ch = (*format++)) {
+      case 's': {
+        char *s;
+        s = va_arg(args, char *);
+        if (s) {
+          int i = 0;
+          while (*s) {
+            *trace_text_ptr++ = *s++;
+            i++;
+            if (i > 256)
+              break;
+          }
+        } else {
+          *trace_text_ptr++ = 'n';
+          *trace_text_ptr++ = 'i';
+          *trace_text_ptr++ = 'l';
+          *trace_text_ptr++ = 'l';
+        }
+        break;
+      }
+      case 'd': {
+        int n = 0;
+        unsigned int d = 1;
+        int num = va_arg(args, int);
+        if (num < 0) {
+          num = -num;
+          *trace_text_ptr++ = '-';
+        }
+
+        while (num / d >= 10)
+          d *= 10;
+
+        while (d != 0) {
+          int digit = num / d;
+          num %= d;
+          d /= 10;
+          if (n || digit > 0 || d == 0) {
+            *trace_text_ptr++ = digit + '0';
+            n++;
+          }
+        }
+        break;
+      }
+      case 'u': {
+        int n = 0;
+        unsigned int d = 1;
+        unsigned int num = va_arg(args, int);
+
+        while (num / d >= 10)
+          d *= 10;
+
+        while (d != 0) {
+          int digit = num / d;
+          num %= d;
+          d /= 10;
+          if (n || digit > 0 || d == 0) {
+            *trace_text_ptr++ = digit + '0';
+            n++;
+          }
+        }
+        break;
+      }
+
+      case 'x':
+      case 'p': {
+        int n = 0;
+        unsigned int d = 1;
+        unsigned int num = va_arg(args, int);
+
+        while (num / d >= 16)
+          d *= 16;
+
+        while (d != 0) {
+          int dgt = num / d;
+          num %= d;
+          d /= 16;
+          if (n || dgt > 0 || d == 0) {
+            *trace_text_ptr++ = dgt + (dgt < 10 ? '0' : 'a' - 10);
+            ++n;
+          }
+        }
+        break;
+      }
+
+      case 'n': {
+        pnumbers[nr_numbers] = va_arg(args, int);
+        nr_numbers++;
+        break;
+      }
+
+      case 'm': {
+        identifier = va_arg(args, int) & 0xff;
+        break;
+      }
+
+      default:
+        break;
+      }
+
+    } else {
+      *trace_text_ptr++ = ch;
+    }
+  }
+
+  while ((unsigned int)trace_text_ptr & 0x3)
+    *trace_text_ptr++ = 0;
+
+  nr_textdwords = (trace_text_ptr - (char *)trace_text) >> 2;
+
+  /*
+   * store into tracebuffer
+   */
+
+  spin_lock_irqsave(&ktdim_lock, ktdim_flags);
+
+  /*
+   * marker, 4 bytes
+   *       byte  0 |
+   *       byte  1 |- hold total length in dwords =
+   *
+   *                  3 (marker,sec,nsec) + nr_numbers + nr_dwordtext
+   *
+   *       byte  2 |- hold nr_numbers
+   *       byte  3 |- hold identifier : 00..ff
+   */
+
+  *gtracebuffer_dword_ptr++ = (3 + nr_numbers + nr_textdwords) |
+                              ((nr_numbers & 0xff) << 16) |
+                              ((identifier & 0xff) << 24);
+  *gtracebuffer_dword_ptr++ = mytime.tv_sec;
+  *gtracebuffer_dword_ptr++ = mytime.tv_nsec;
+
+  i = 0;
+  while (i != nr_numbers) {
+    *gtracebuffer_dword_ptr++ = pnumbers[i];
+    i++;
+  }
+
+  i = nr_textdwords;
+  while (i--) {
+    *gtracebuffer_dword_ptr++ = *trace_text_dword_ptr++;
+  }
+
+  /*
+   * mark the next marker as invalid
+   */
+  *gtracebuffer_dword_ptr = 0;
+
+  /*
+   * if full then disable
+   */
+  if (((unsigned int)gtracebuffer_dword_ptr - (unsigned int)gtracebuffer) >
+      (gtracebuffersize - 1024)) {
+    gtditrace_enabled = 0;
+  }
+
+  spin_unlock_irqrestore(&ktdim_lock, ktdim_flags);
+
+  if (gtditrace_enabled == 0)
+    printk("ktdim: full\n");
+}
+
+static void tditrace_rewind(void) {
+
+  spin_lock_irqsave(&ktdim_lock, ktdim_flags);
+
+  gtditrace_enabled = 0;
+
+  spin_unlock_irqrestore(&ktdim_lock, ktdim_flags);
+
+  printk("ktdim: rewind\n");
+
+  gtracebuffer_dword_ptr = (unsigned int *)gtracebuffer;
+
+  /*
+   * write one time start text
+   */
+  sprintf((char *)gtracebuffer_dword_ptr, (char *)"TDITRACE");
+  gtracebuffer_dword_ptr += 2;
+
+  do_gettimeofday((struct timeval *)gtracebuffer_dword_ptr);
+  gtracebuffer_dword_ptr += 2;
+
+  do_posix_clock_monotonic_gettime((struct timespec *)gtracebuffer_dword_ptr);
+  gtracebuffer_dword_ptr += 2;
+
+  *gtracebuffer_dword_ptr = 0;
+
+  gtditrace_enabled = 1;
+}
+
+static long ktdim_Ioctl(struct file *filp, unsigned int cmd, unsigned long arg);
+
+static int ktdim_Mmap(struct file *file, struct vm_area_struct *vma);
+
+static struct file_operations gktdimFops = {.unlocked_ioctl = ktdim_Ioctl,
+                                            .mmap = ktdim_Mmap};
+
+static struct miscdevice gktdimMiscDev = {
+    .minor = MISC_DYNAMIC_MINOR, .name = "ktdim", .fops = &gktdimFops};
+
+static long ktdim_Ioctl(struct file *filp, unsigned int cmd,
+                        unsigned long arg) {
+  switch (cmd) {
+  case KTDIM_IOCTL_GET_TRACEBUFFERSIZE:
+    return gtracebuffersize;
+
+  case KTDIM_IOCTL_REWIND:
+    tditrace_rewind();
+    return 0;
+
+  case KTDIM_IOCTL_ON:
+    gtditrace_enabled = 1;
+    printk("ktdim: on\n");
+    return 0;
+
+  case KTDIM_IOCTL_OFF:
+    gtditrace_enabled = 0;
+    printk("ktdim: off\n");
+    return 0;
+
+  default:
+    printk("ktdim: unknown ioctl:0x%08x\n", cmd);
+    return -ENOSYS;
+  }
+}
+
+static int ktdim_Mmap(struct file *file, struct vm_area_struct *vma) {
+  unsigned int size;
+
+  if (vma->vm_pgoff != 0) {
+    return -EINVAL;
+  }
+
+  size = vma->vm_end - vma->vm_start;
+  if (size != PAGE_ALIGN(gtracebuffersize)) {
+    printk("ktdim: incorrect mmap size\n");
+    return -EINVAL;
+  }
+
+  /* Prevent the swapper from considering these pages for swap and touching
+   * them
+   */
+  vma->vm_flags |= VM_DONTEXPAND | VM_DONTDUMP | VM_DONTEXPAND;
+
+  return remap_vmalloc_range(vma, gtracebuffer, 0);
+}
+
+static void rev_parse_args(char *str, u8 *argc, char **argv, int max_arg) {
+  char *ps = str;
+  char *token;
+  const char delimiters[] = " \t\n";
+
+  while ((token = strsep(&ps, delimiters)) != NULL) {
+#if 0
+    printk("[%s]\n", token);
+#endif
+    argv[*argc] = token;
+    (*argc)++;
+  }
+}
+
+int proc_ktdim_status(struct seq_file *sf, void *v) {
+  int idx;
+  for (idx = 0; idx < 3; idx++) {
+    seq_printf(sf, "status(%d):\n", idx);
+  }
+  return 0;
+}
+
+static int do_something(void *kvm, u32 len) {
+  void *x;
+  if (!kvm || !len)
+    return -1;
+
+  for (x = kvm; x < (kvm + len); x += PAGE_SIZE) {
+    memset(x, 0xff, 0x10);
+  }
+  return 0;
+}
+
+u32 *vm;
+u32 *km;
+u32 *fp;
+
+int proc_ktdim_control(struct file *file, const char __user *buffer,
+                       size_t count, loff_t *ppos) {
+  char str[512];
+  u8 argc = 0;
+  char *argv[5];
+#if 1
+  u8 i;
+#endif
+  u32 sz;
+
+  if (copy_from_user(str, buffer, count))
+    return -EFAULT;
+
+  rev_parse_args(str, &argc, argv, 5);
+
+#if 1
+  for (i = 0; i < argc; i++) {
+    printk("ktdim: argv[%d]=%s, %02x\n", i, argv[i], *argv[i]);
+  }
+#endif
+
+  if (argc && (*argv[argc - 1] == 0x0))
+    argc--;
+
+  if ((argc == 1) && !strcmp(argv[0], "rewind")) {
+    tditrace_rewind();
+  } else if ((argc == 2) && !strcmp(argv[0], "kmalloc")) {
+    sz = (int)simple_strtol(argv[1], NULL, 10);
+    km = kmalloc(sz, GFP_KERNEL);
+    do_something(km, sz);
+    if (!km)
+      printk("ktdim: kmalloc of %u bytes FAILED!\n", sz);
+    else {
+      printk("ktdim: kmalloc'd %u bytes (%u Kb, %u MB) @ 0x%08x, ksize = %u\n",
+             sz, sz / 1024, sz / (1024 * 1024), (u32)km, ksize(km));
+    }
+  } else if ((argc == 2) && !strcmp(argv[0], "vmalloc")) {
+    sz = (int)simple_strtol(argv[1], NULL, 10);
+    vm = vmalloc(sz);
+    do_something(vm, sz);
+    if (!vm)
+      printk("ktdim: vmalloc of %u bytes FAILED!\n", sz);
+    else {
+      printk("ktdim: vmalloc'd %u bytes (%u Kb, %u MB) @ 0x%08x\n", sz,
+             sz / 1024, sz / (1024 * 1024), (u32)vm);
+    }
+  } else if ((argc == 1) && !strcmp(argv[0], "kfree")) {
+    if (!km)
+      printk("ktdim: km = 0!\n");
+    else {
+      kfree(km);
+      printk("ktdim: kfree'd\n");
+    }
+  } else if ((argc == 1) && !strcmp(argv[0], "vfree")) {
+    if (!vm)
+      printk("ktdim: vm = 0!\n");
+    else {
+      vfree(vm);
+      printk("ktdim: vfree'd\n");
+    }
+  } else if ((argc == 1) && !strcmp(argv[0], "__get_free_page")) {
+    fp = (u32 *)__get_free_page(GFP_KERNEL);
+    do_something(fp, 1);
+    if (!fp)
+      printk("ktdim: __get_free_page FAILED!\n");
+    else {
+      printk("ktdim: __get_free_page @ 0x%08x\n", (u32)fp);
+    }
+  } else if ((argc == 1) && !strcmp(argv[0], "get_zeroed_page")) {
+    fp = (u32 *)get_zeroed_page(GFP_KERNEL);
+    if (!fp)
+      printk("ktdim: get_zeroed_page FAILED!\n");
+    else {
+      printk("ktdim: get_zeroed_page @ 0x%08x\n", (u32)fp);
+    }
+  } else if ((argc == 2) && !strcmp(argv[0], "__get_free_pages")) {
+    sz = (int)simple_strtol(argv[1], NULL, 10);
+    fp = (u32 *)__get_free_pages(GFP_KERNEL, sz);
+    if (!fp)
+      printk("ktdim: __get_free_pages FAILED!\n");
+    else {
+      printk("ktdim: __get_free_pages allocated %u pages @ 0x%08x\n", 2 << sz,
+             (u32)fp);
+    }
+  } else {
+
+    printk("ktdim: unknown command\n");
+  }
+
+  return count;
+}
+
+int proc_ktdim_tdi(struct file *file, const char __user *buffer, size_t count,
+                   loff_t *ppos) {
+  char text[512];
+
+  if (count > 1) {
+    strncpy(text, buffer, count - 1);
+    text[count - 1] = 0;
+    tditrace("%s", text);
+  } else {
+
+    // tditrace("%s", "test");
+
+    tditrace("mm%m%1", 192, 3000);
+  }
+  return count;
+}
+
+int proc_ktdim_help(struct seq_file *sf, void *v) {
+  struct timeval now;
+  u32 *now_ref = (u32 *)&now;
+
+  do_gettimeofday(&now);
+  seq_printf(sf, "tv_sec:tv_usec=0x%08x=%ld:%ld\n", *now_ref, now.tv_sec,
+             now.tv_usec);
+
+  seq_printf(sf, "Usage:\n");
+  seq_printf(sf, "  echo \"kmalloc <bytes>\" > /proc/ktdim-control\n");
+  seq_printf(sf, "  echo \"vmalloc <bytes>\" > /proc/ktdim-control\n");
+  seq_printf(sf, "  echo \"kfree\" > /proc/ktdim-control\n");
+  seq_printf(sf, "  echo \"vfree\" > /proc/ktdim-control\n");
+  return 0;
+}
+
+int proc_ktdim_help_open(struct inode *inode, struct file *file) {
+  return single_open(file, proc_ktdim_help, PDE_DATA(inode));
+}
+
+int proc_ktdim_status_open(struct inode *inode, struct file *file) {
+  return single_open(file, proc_ktdim_status, PDE_DATA(inode));
+}
+
+struct file_operations proc_ktdim_help_fops = {
+    .owner = THIS_MODULE,
+    .open = proc_ktdim_help_open,
+    .read = seq_read,
+    .llseek = seq_lseek,
+    .release = seq_release,
+};
+
+struct file_operations proc_ktdim_control_fops = {
+    .owner = THIS_MODULE,
+    .read = seq_read,
+    .llseek = seq_lseek,
+    .write = proc_ktdim_control,
+};
+
+struct file_operations proc_ktdim_status_fops = {
+    .owner = THIS_MODULE,
+    .open = proc_ktdim_status_open,
+    .read = seq_read,
+    .llseek = seq_lseek,
+    .release = seq_release,
+};
+
+struct file_operations proc_ktdim_tdi_fops = {
+    .owner = THIS_MODULE,
+    .read = seq_read,
+    .llseek = seq_lseek,
+    .write = proc_ktdim_tdi,
+};
+
+static int __init ktdim_init(void) {
+  int err = -1;
+  int ret;
+
+  printk("ktdim: Init.. (%s-%s)\n", __DATE__, __TIME__);
+
+  ret = misc_register(&gktdimMiscDev);
+  if (ret < 0) {
+    printk("ktdim: can't register misc device (minor %d)!\n",
+           gktdimMiscDev.minor);
+    return ret;
+  }
+
+  tditrace_create_buffer();
+
+  if (proc_create("ktdim-help", S_IFREG | S_IRUGO | S_IWUSR, NULL,
+                  &proc_ktdim_help_fops) == NULL) {
+    printk("proc create entry error\n");
+  } else if (proc_create("ktdim-control", S_IFREG | S_IRUGO | S_IWUSR, NULL,
+                         &proc_ktdim_control_fops) == NULL) {
+    printk("proc create entry error\n");
+  } else if (proc_create("ktdim-status", S_IFREG | S_IRUGO | S_IWUSR, NULL,
+                         &proc_ktdim_status_fops) == NULL) {
+    printk("proc create entry error\n");
+  } else if (proc_create("ktdim-tdi", S_IFREG | S_IRUGO | S_IWUSR, NULL,
+                         &proc_ktdim_tdi_fops) == NULL) {
+    printk("proc create entry error\n");
+  } else
+    err = 0;
+  return err;
+}
+
+static void __exit ktdim_exit(void) {
+  printk("ktdim: Exit..\n");
+
+  misc_deregister(&gktdimMiscDev);
+
+  vfree(gtracebuffer);
+
+  remove_proc_entry("ktdim-help", NULL);
+  remove_proc_entry("ktdim-control", NULL);
+  remove_proc_entry("ktdim-status", NULL);
+  remove_proc_entry("ktdim-tdi", NULL);
+}
+
+module_init(ktdim_init);
+module_exit(ktdim_exit);
+
+MODULE_AUTHOR("REV");
+MODULE_DESCRIPTION("ktdim");
+MODULE_LICENSE("GPL");
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index a494ace..10e1e7f 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -1962,6 +1962,8 @@ asmlinkage void schedule_tail(struct task_struct *prev)
 		put_user(task_pid_vnr(current), current->set_child_tid);
 }
 
+void tditrace(const char *, ...);
+
 /*
  * context_switch - switch to the new MM and the new
  * thread's register state.
@@ -1983,6 +1985,10 @@ context_switch(struct rq *rq, struct task_struct *prev,
 	 */
 	arch_start_context_switch(prev);
 
+	//tditrace("@S+switch %s[%d]:%s[%d]", prev->comm, prev->pid, next->comm, next->pid);
+	tditrace("@T-%s|%d", prev->comm, prev->pid);
+	tditrace("@T+%s|%d", next->comm, next->pid);
+
 	if (!mm) {
 		next->active_mm = oldmm;
 		atomic_inc(&oldmm->mm_count);
diff --git a/mm/mmap.c b/mm/mmap.c
index af99b9e..5452180 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1200,10 +1200,11 @@ static inline unsigned long round_hint_to_min(unsigned long hint)
 	return hint;
 }
 
+void tditrace(const char *, ...);
+
 /*
  * The caller must hold down_write(&current->mm->mmap_sem).
  */
-
 unsigned long do_mmap_pgoff(struct file *file, unsigned long addr,
 			unsigned long len, unsigned long prot,
 			unsigned long flags, unsigned long pgoff,
@@ -1491,6 +1492,8 @@ unsigned long mmap_region(struct file *file, unsigned long addr,
 	struct rb_node **rb_link, *rb_parent;
 	unsigned long charged = 0;
 
+    tditrace("+MM 0x%x", len);
+
 	/* Check against address space limit. */
 	if (!may_expand_vm(mm, len >> PAGE_SHIFT)) {
 		unsigned long nr_pages;
@@ -1625,6 +1628,8 @@ out:
 	 */
 	vma->vm_flags |= VM_SOFTDIRTY;
 
+    tditrace("-MM");
+
 	return addr;
 
 unmap_and_free_vma:
@@ -2595,6 +2600,8 @@ static unsigned long do_brk(unsigned long addr, unsigned long len)
 	if (!len)
 		return addr;
 
+    tditrace("+BRK 0x%x", len);
+
 	flags = VM_DATA_DEFAULT_FLAGS | VM_ACCOUNT | mm->def_flags;
 
 	error = get_unmapped_area(NULL, addr, len, 0, MAP_FIXED);
@@ -2665,10 +2672,15 @@ static unsigned long do_brk(unsigned long addr, unsigned long len)
 	vma_link(mm, vma, prev, rb_link, rb_parent);
 out:
 	perf_event_mmap(vma);
+
+
 	mm->total_vm += len >> PAGE_SHIFT;
 	if (flags & VM_LOCKED)
 		mm->locked_vm += (len >> PAGE_SHIFT);
 	vma->vm_flags |= VM_SOFTDIRTY;
+
+    tditrace("-BRK");
+
 	return addr;
 }
 
diff --git a/mm/mremap.c b/mm/mremap.c
index 0843feb..59d9b84 100644
--- a/mm/mremap.c
+++ b/mm/mremap.c
@@ -458,6 +458,8 @@ static int vma_expandable(struct vm_area_struct *vma, unsigned long delta)
 	return 1;
 }
 
+void tditrace(const char *, ...);
+
 /*
  * Expand (or shrink) an existing mapping, potentially moving it at the
  * same time (controlled by the MREMAP_MAYMOVE flag and available VM space)
@@ -495,6 +497,8 @@ SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,
 	if (!new_len)
 		return ret;
 
+    tditrace("+MR 0x%x", new_len);
+
 	down_write(&current->mm->mmap_sem);
 
 	if (flags & MREMAP_FIXED) {
@@ -576,5 +580,8 @@ out:
 	up_write(&current->mm->mmap_sem);
 	if (locked && new_len > old_len)
 		mm_populate(new_addr + old_len, new_len - old_len);
+
+    tditrace("-MR");
+
 	return ret;
 }
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 6fca390..06d627b 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -2683,6 +2683,8 @@ got_pg:
 	return page;
 }
 
+void tditrace(const char *, ...);
+
 /*
  * This is the 'heart' of the zoned buddy allocator.
  */
@@ -2766,6 +2768,9 @@ out:
 
 	memcg_kmem_commit_charge(page, memcg, order);
 
+    tditrace("A%u", order);
+    tditrace("F~%u", global_page_state(NR_FREE_PAGES) << 2);
+
 	return page;
 }
 EXPORT_SYMBOL(__alloc_pages_nodemask);
@@ -2784,6 +2789,7 @@ unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)
 	VM_BUG_ON((gfp_mask & __GFP_HIGHMEM) != 0);
 
 	page = alloc_pages(gfp_mask, order);
+
 	if (!page)
 		return 0;
 	return (unsigned long) page_address(page);
@@ -2804,6 +2810,9 @@ void __free_pages(struct page *page, unsigned int order)
 		else
 			__free_pages_ok(page, order);
 	}
+
+    tditrace("F%u", order);
+    tditrace("F~%u", global_page_state(NR_FREE_PAGES) << 2);
 }
 
 EXPORT_SYMBOL(__free_pages);
diff --git a/mm/slub.c b/mm/slub.c
index 5c1343a..0b68dee 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -2428,13 +2428,23 @@ static __always_inline void *slab_alloc(struct kmem_cache *s,
 	return slab_alloc_node(s, gfpflags, NUMA_NO_NODE, addr);
 }
 
+void tditrace(const char *, ...);
+
 void *kmem_cache_alloc(struct kmem_cache *s, gfp_t gfpflags)
 {
+	if ((s->name[1] == 'm') && (s->name[2] == 'a')) {
+    	tditrace("+S%s", &s->name[8]);
+    }
+
 	void *ret = slab_alloc(s, gfpflags, _RET_IP_);
 
 	trace_kmem_cache_alloc(_RET_IP_, ret, s->object_size,
 				s->size, gfpflags);
 
+	if ((s->name[1] == 'm') && (s->name[2] == 'a')) {
+    	tditrace("-S%s", &s->name[8]);
+    }
+
 	return ret;
 }
 EXPORT_SYMBOL(kmem_cache_alloc);
diff --git a/mm/vmalloc.c b/mm/vmalloc.c
index 1074543..512db24 100644
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@ -1458,7 +1458,7 @@ static void __vunmap(const void *addr, int deallocate_pages)
 	kfree(area);
 	return;
 }
- 
+
 /**
  *	vfree  -  release memory allocated by vmalloc()
  *	@addr:		memory base address
@@ -1487,6 +1487,7 @@ void vfree(const void *addr)
 			schedule_work(&p->wq);
 	} else
 		__vunmap(addr, 1);
+
 }
 EXPORT_SYMBOL(vfree);
 
@@ -1602,6 +1603,8 @@ fail:
 	return NULL;
 }
 
+void tditrace(const char *, ...);
+
 /**
  *	__vmalloc_node_range  -  allocate virtually contiguous memory
  *	@size:		allocation size
@@ -1625,6 +1628,8 @@ void *__vmalloc_node_range(unsigned long size, unsigned long align,
 	void *addr;
 	unsigned long real_size = size;
 
+	tditrace("+VM %u", size);
+
 	size = PAGE_ALIGN(size);
 	if (!size || (size >> PAGE_SHIFT) > totalram_pages)
 		goto fail;
@@ -1652,6 +1657,8 @@ void *__vmalloc_node_range(unsigned long size, unsigned long align,
 	 */
 	kmemleak_alloc(addr, real_size, 3, gfp_mask);
 
+	tditrace("-VM");
+
 	return addr;
 
 fail:
@@ -1709,6 +1716,7 @@ void *vmalloc(unsigned long size)
 {
 	return __vmalloc_node_flags(size, NUMA_NO_NODE,
 				    GFP_KERNEL | __GFP_HIGHMEM);
+
 }
 EXPORT_SYMBOL(vmalloc);
 
@@ -1726,6 +1734,7 @@ void *vzalloc(unsigned long size)
 {
 	return __vmalloc_node_flags(size, NUMA_NO_NODE,
 				GFP_KERNEL | __GFP_HIGHMEM | __GFP_ZERO);
+
 }
 EXPORT_SYMBOL(vzalloc);
 
@@ -1749,6 +1758,7 @@ void *vmalloc_user(unsigned long size)
 		area = find_vm_area(ret);
 		area->flags |= VM_USERMAP;
 	}
+
 	return ret;
 }
 EXPORT_SYMBOL(vmalloc_user);
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 21571dc..3936f48 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -176,6 +176,8 @@ out:
 	return skb;
 }
 
+void tditrace(const char *, ...);
+
 /**
  *	__alloc_skb	-	allocate a network buffer
  *	@size: size to allocate
@@ -202,6 +204,8 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 	u8 *data;
 	bool pfmemalloc;
 
+	tditrace("+__alloc_skb %u", size);
+
 	cache = (flags & SKB_ALLOC_FCLONE)
 		? skbuff_fclone_cache : skbuff_head_cache;
 
@@ -267,6 +271,9 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 		child->pfmemalloc = pfmemalloc;
 	}
 out:
+
+	tditrace("-__alloc_skb");
+
 	return skb;
 nodata:
 	kmem_cache_free(cache, skb);
@@ -413,6 +420,8 @@ struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
 	unsigned int fragsz = SKB_DATA_ALIGN(length + NET_SKB_PAD) +
 			      SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 
+   	tditrace("+__netdev_alloc_skb %u", length);
+
 	if (fragsz <= PAGE_SIZE && !(gfp_mask & (__GFP_WAIT | GFP_DMA))) {
 		void *data;
 
@@ -434,6 +443,9 @@ struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
 		skb_reserve(skb, NET_SKB_PAD);
 		skb->dev = dev;
 	}
+
+   	tditrace("-__netdev_alloc_skb");
+
 	return skb;
 }
 EXPORT_SYMBOL(__netdev_alloc_skb);
-- 
1.9.1

